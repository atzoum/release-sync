name: Sync releases to main branch

on:
  pull_request:
    types:
      - closed

jobs:
  sync:
    env:
      GH_TOKEN: ${{ secrets.PAT }}
    if: ${{ github.event.pull_request.merged && startsWith(github.event.pull_request.base.ref, 'release/') && startsWith(github.event.pull_request.title, 'chore: release') }}
    runs-on: ubuntu-latest

    steps:
      - name: parse commit
        run: |
          MERGE_COMMIT_SHA=$(gh pr view ${{ github.event.pull_request.number }} --json mergeCommit -q .mergeCommit.oid)
          echo "MERGE_COMMIT_SHA=$MERGE_COMMIT_SHA" >> "$GITHUB_ENV"
      
      - name: parse release tag
        run: |
          RELEASE_TAG=$(git describe --contains $MERGE_COMMIT_SHA)
          echo "RELEASE_TAG=$RELEASE_TAG" >> "$GITHUB_ENV"
      
      - name: checkout commit
        uses: actions/checkout@v4
        with:
          ref: ${{ env.MERGE_COMMIT_SHA }}
          fetch-depth: 0
      
      - name: create branch
        run: |
          PR_BRANCH="sync-release-fixes-${MERGE_COMMIT_SHA}"
          echo "PR_BRANCH=$PR_BRANCH" >> "$GITHUB_ENV"
          git checkout -b $PR_BRANCH
          git push origin $PR_BRANCH
      
      - name: create pull request for major or minor release
        if: ${{ endsWith(env.RELEASE_TAG, '.0') }}
        run: |
          COMMIT_OVERRIDE=$(git rev-list --reverse --pretty="%s" --cherry-pick --right-only ${PR_BRANCH}...origin/main |grep -v "commit")
          gh pr create \
            --title "chore: sync release ${RELEASE_NUMBER} to main branch" \
            --body "# Description\n\nSyncing release ${RELEASE_NUMBER} to main branch\n\n**WARNING:** this needs to be merged using a **Merge Commit**\n\nBEGIN_COMMIT_OVERRIDE\n${COMMIT_OVERRIDE}\nEND_COMMIT_OVERRIDE"\
            --base main \
            --head $PR_BRANCH \
            --assignee "${{ github.event.pull_request.merged_by.login }}" \
            --label "Enable Test"
      
      - name: create pull request for patch release
        if: ${{ ! endsWith(env.RELEASE_TAG, '.0') }}
        run: |
          COMMIT_OVERRIDE=$(git rev-list --reverse --pretty="%s" --cherry-pick --right-only origin/main...${PR_BRANCH} | grep -v "commit" | grep -v "chore: release")
          gh pr create \
            --title "chore: sync patch release ${RELEASE_NUMBER} to main branch" \
            --body "# Description\n\nSyncing patch release ${RELEASE_NUMBER} to main branch\n\nBEGIN_COMMIT_OVERRIDE\n${COMMIT_OVERRIDE}\nEND_COMMIT_OVERRIDE"\
            --base main \
            --head $PR_BRANCH \
            --assignee "${{ github.event.pull_request.merged_by.login }}" \
            --label "Enable Test"